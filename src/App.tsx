// App.tsx
import React, { useState, useEffect } from "react";
import "./App.css";
import avatar from "./assets/–ú–æ–ª–æ–¥–æ–π —á–µ–ª–æ–≤–µ–∫ –≤ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–æ–º –≥–æ–ª–æ–≤–Ω–æ–º —É–±–æ—Ä–µ.png";

const levels = ["easy", "medium", "hard"];

const wordsByLevel = {
  easy: [
    { kz: "–°”ô–ª–µ–º", ru: "–ü—Ä–∏–≤–µ—Ç" },
    { kz: "“ö–∞–ª–∞–π—Å—ã“£", ru: "–ö–∞–∫ –¥–µ–ª–∞" },
    { kz: "–ò”ô", ru: "–î–∞" },
    { kz: "–ñ–æ“õ", ru: "–ù–µ—Ç" },
  ],
  medium: [
    { kz: "–û“õ–∏–º—ã–Ω", ru: "–Ø —É—á—É—Å—å" },
    { kz: "–ö–µ–ª–µ–º—ñ–Ω", ru: "–Ø –∏–¥—É" },
    { kz: "–Ü—à–µ–º—ñ–Ω", ru: "–Ø –ø—å—é" },
  ],
  hard: [
    { kz: "–¢“Ø—Å—ñ–Ω–±–µ–¥—ñ–º", ru: "–Ø –Ω–µ –ø–æ–Ω—è–ª" },
    { kz: "–ö–µ–∑–¥–µ—Å–µ–π—ñ–∫", ru: "–î–∞–≤–∞–π—Ç–µ –≤—Å—Ç—Ä–µ—Ç–∏–º—Å—è" },
    { kz: "“∞—Å—ã–Ω–∞–º—ã–Ω", ru: "–Ø –ø—Ä–µ–¥–ª–∞–≥–∞—é" },
  ],
};

export default function App() {
  const [screen, setScreen] = useState("home");
  const [level, setLevel] = useState("easy");
  const [score, setScore] = useState(0);
  const [errors, setErrors] = useState(0);
  const [selectedPair, setSelectedPair] = useState<{ kz: string | null; ru: string | null }>({ kz: null, ru: null });
  const [matchedPairs, setMatchedPairs] = useState<string[][]>([]);

  const wordPairs = wordsByLevel[level];

  const handleLevelSelect = (lvl: string) => {
    setLevel(lvl);
    setScreen("learn1");
  };

  const handlePairClick = (side: "kz" | "ru", word: string) => {
    const updated = { ...selectedPair, [side]: word };
    setSelectedPair(updated);

    if (updated.kz && updated.ru) {
      const isMatch = wordPairs.some((pair) => pair.kz === updated.kz && pair.ru === updated.ru);
      if (isMatch) {
        setMatchedPairs([...matchedPairs, [updated.kz, updated.ru]]);
        setScore(score + 10);
      } else {
        setErrors(errors + 1);
        setMatchedPairs([]); // reset all if wrong
      }
      setSelectedPair({ kz: null, ru: null });
    }
  };

  const renderHome = () => (
    <div className="container">
      <img src={avatar} alt="KazBot Logo" className="logo" />
      <h1>KazBot</h1>
      <p className="description">–¢–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –∏–∑—É—á–µ–Ω–∏–∏ –∫–∞–∑–∞—Ö—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ kz</p>
      <div className="buttons">
        <h3>–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å:</h3>
        {levels.map((lvl) => (
          <button key={lvl} onClick={() => handleLevelSelect(lvl)}>
            {lvl === "easy" ? "–ù–∞—á–∞–ª—å–Ω—ã–π" : lvl === "medium" ? "–°—Ä–µ–¥–Ω–∏–π" : "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π"}
          </button>
        ))}
      </div>
    </div>
  );

  const renderLearn1 = () => (
    <div className="container">
      <h2>üî∑ –≠—Ç–∞–ø 1: –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–∞—Ä —Å–ª–æ–≤</h2>
      <p>–°–æ–µ–¥–∏–Ω–∏ –∫–∞–∑–∞—Ö—Å–∫–∏–µ —Å–ª–æ–≤–∞ —Å —Ä—É—Å—Å–∫–∏–º–∏</p>
      <div className="grid">
        <div>
          {wordPairs.map((pair) => (
            <button key={pair.kz} onClick={() => handlePairClick("kz", pair.kz)}>{pair.kz}</button>
          ))}
        </div>
        <div>
          {wordPairs.map((pair) => (
            <button key={pair.ru} onClick={() => handlePairClick("ru", pair.ru)}>{pair.ru}</button>
          ))}
        </div>
      </div>
      <div>
        <p>–û—á–∫–∏: {score}</p>
        <p>–û—à–∏–±–∫–∏: {errors}</p>
      </div>
      <button onClick={() => setScreen("learn2")}>‚û°Ô∏è –î–∞–ª–µ–µ</button>
      <button onClick={() => setScreen("home")}>‚¨ÖÔ∏è –ù–∞–∑–∞–¥</button>
    </div>
  );

  const renderLearn2 = () => (
    <div className="container">
      <h2>üß† –≠—Ç–∞–ø 2: –í—ã–±–æ—Ä –ø–µ—Ä–µ–≤–æ–¥–∞</h2>
      <p>–°–∫–æ—Ä–æ –¥–æ–±–∞–≤–∏–º</p>
      <button onClick={() => setScreen("learn3")}>‚û°Ô∏è –î–∞–ª–µ–µ</button>
      <button onClick={() => setScreen("learn1")}>‚¨ÖÔ∏è –ù–∞–∑–∞–¥</button>
    </div>
  );

  const renderLearn3 = () => (
    <div className="container">
      <h2>‚úçÔ∏è –≠—Ç–∞–ø 3: –°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</h2>
      <p>–°–∫–æ—Ä–æ –¥–æ–±–∞–≤–∏–º</p>
      <button onClick={() => setScreen("learn2")}>‚¨ÖÔ∏è –ù–∞–∑–∞–¥</button>
    </div>
  );

  return screen === "home"
    ? renderHome()
    : screen === "learn1"
    ? renderLearn1()
    : screen === "learn2"
    ? renderLearn2()
    : renderLearn3();
}






